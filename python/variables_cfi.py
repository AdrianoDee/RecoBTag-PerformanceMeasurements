import FWCore.ParameterSet.Config as cms

#Only variables that are present in this list, can be stored in the output ntuple.
#Prefixes do not have to be given here, theses will be handled automatically
#Suffixes have to be introduced by inserting an additional PSet. See for example Jet_nSubJets and Jet_nSubJets_SoftDropPuppi

variableList = [
    cms.PSet(
      variable    = cms.string("nBitTrigger"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nBitTrigger"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("BitTrigger"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("BitTrigger"),
      requires    = cms.vstring("nBitTrigger"),
    ),
    cms.PSet(
      variable    = cms.string("Run"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Run"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("Evt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Evt"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("LumiBlock"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("LumiBlock"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PVz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PVz"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PVez"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PVez"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("GenPVz"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPVz"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("pthat"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pthat"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("mcweight"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("mcweight"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("rho"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("rho"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("nPV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nPV"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("BX"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("BX"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PV_x"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_x"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_y"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_y"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_z"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_z"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_ex"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_ex"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_ey"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_ey"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_ez"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_ez"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_chi2"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_ndf"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_ndf"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_isgood"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_isgood"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("PV_isfake"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PV_isfake"),
      requires    = cms.vstring("nPV"),
    ),
    cms.PSet(
      variable    = cms.string("nPUtrue"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the true number of pileup interactions that have been added to the event"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("nPU"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the number of pileup interactions that have been added to the event"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_bunch"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("0 if on time pileup, -1 or +1 if out-of-time"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_z"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the true primary vertex position along the z axis for each added interaction"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_sumpT_low"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the sum of the transverse momentum of the tracks originating from each interaction, where track pT > low_cut"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_sumpT_high"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the sum of the transverse momentum of the tracks originating from each interaction, where track pT > high_cut"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_ntrks_low"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the number of tracks originating from each interaction, where track pT > low_cu"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PU_ntrks_high"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("the number of tracks originating from each interaction, where track pT > high_cut"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ncQuarks"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("ncQuarks"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_pT"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_eta"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_phi"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_pdgID"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_status"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_status"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("cQuark_fromGSP"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("cQuark_fromGSP"),
      requires    = cms.vstring("ncQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("nbQuarks"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nbQuarks"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_pT"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_eta"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_phi"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_pdgID"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_status"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_status"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("bQuark_fromGSP"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("bQuark_fromGSP"),
      requires    = cms.vstring("nbQuarks"),
    ),
    cms.PSet(
      variable    = cms.string("nBHadrons"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nBHadrons"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_pT"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_eta"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_phi"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_mass"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_mass"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_pdgID"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_mother"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_mother"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_hasBdaughter"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_hasBdaughter"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_SVx"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_SVx"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_SVy"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_SVy"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_SVz"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_SVz"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_nCharged"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_nCharged"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_DHadron1"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_DHadron1"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("BHadron_DHadron2"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("BHadron_DHadron2"),
      requires    = cms.vstring("nBHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("nDHadrons"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nDHadrons"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("nDaughters"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nDaughters"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_pT"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_eta"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_phi"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_mass"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_mass"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_SVx"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_SVx"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_SVy"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_SVy"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_SVz"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_SVz"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_pdgID"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_nDaughters"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_nDaughters"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_DaughtersPdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("sum(DHadron_nDaughters[i]): needed for daughter pdgIDs"),
      requires    = cms.vstring("nDaughters"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_nChargedDaughters"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_nChargedDaughters"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("DHadron_nCharged"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("DHadron_nCharged"),
      requires    = cms.vstring("nDHadrons"),
    ),
    cms.PSet(
      variable    = cms.string("nGenlep"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nGenlep"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_pT"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_eta"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_phi"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_pdgID"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_status"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_status"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("Genlep_mother"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genlep_mother"),
      requires    = cms.vstring("nGenlep"),
    ),
    cms.PSet(
      variable    = cms.string("nGenquark"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nGenquark"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("Genquark_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genquark_pT"),
      requires    = cms.vstring("nGenquark"),
    ),
    cms.PSet(
      variable    = cms.string("Genquark_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genquark_eta"),
      requires    = cms.vstring("nGenquark"),
    ),
    cms.PSet(
      variable    = cms.string("Genquark_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genquark_phi"),
      requires    = cms.vstring("nGenquark"),
    ),
    cms.PSet(
      variable    = cms.string("Genquark_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genquark_pdgID"),
      requires    = cms.vstring("nGenquark"),
    ),
    cms.PSet(
      variable    = cms.string("Genquark_mother"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Genquark_mother"),
      requires    = cms.vstring("nGenquark"),
    ),
    cms.PSet(
      variable    = cms.string("nGenV0"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nGenV0"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_pT"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_eta"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_phi"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_pdgID"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_SVx"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_SVx"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_SVy"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_SVy"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_SVz"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_SVz"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("GenV0_nCharged"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenV0_nCharged"),
      requires    = cms.vstring("nGenV0"),
    ),
    cms.PSet(
      variable    = cms.string("nGenPruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nGenPruned"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_pT"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_pT"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_eta"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_phi"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_mass"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_mass"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_status"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_status"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_pdgID"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_pdgID"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("GenPruned_mother"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("GenPruned_mother"),
      requires    = cms.vstring("nGenPruned"),
    ),
    cms.PSet(
      variable    = cms.string("nTrkAll"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkAll"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_d0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_d0"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_dz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_dz"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_p"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_p"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_pt"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_eta"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_phi"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_chi2"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_charge"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_charge"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitAll"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitAll"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitPixel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitPixel"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitStrip"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitStrip"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitTIB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitTIB"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitTID"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitTID"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitTOB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitTOB"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitTEC"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitTEC"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitPXB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitPXB"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nHitPXF"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nHitPXF"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_isHitL1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_isHitL1"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nSiLayers"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nSiLayers"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_nPxLayers"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_nPxLayers"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_PV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_PV"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("TrkAll_PVweight"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkAll_PVweight"),
      requires    = cms.vstring("nTrkAll"),
    ),
    cms.PSet(
      variable    = cms.string("nPatMuon"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nPatMuon"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_pt"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_eta"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_phi"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_isSoftMuon"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_isSoftMuon"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_isMediumMuon"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_isMediumMuon"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_isTightMuon"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_isTightMuon"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_iso"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_iso"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_isoTrackerOnly"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_isoTrackerOnly"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_IP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_IP"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_IPsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_IPsig"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_IP2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_IP2D"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PatMuon_IP2Dsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PatMuon_IP2Dsig"),
      requires    = cms.vstring("nPatMuon"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_chan"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_chan"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_trigWord"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_trigWord"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_metfilterWord"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_metfilterWord"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_allmepartons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_allmepartons"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_matchmepartons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_matchmepartons"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_ng"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_ng"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_gid"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_gid"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_nl,"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_nl,"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lid"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lid"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lgid"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lgid"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lch"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lch"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_nw"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_nw"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_gpt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_gpt"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_geta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_geta"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_gphi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_gphi"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_gm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_gm"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lpt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lpt"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_leta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_leta"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lphi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lphi"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_lm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_lm"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_metpt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_metpt"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_metphi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_metphi"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_w"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_w"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("ttbar_ptweight"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ttbar_ptweight"),
      requires    = cms.vstring("ttbar_ng"),
    ),
    cms.PSet(
      variable    = cms.string("nJet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nJet"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("Jet_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_pt"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_uncorrpt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_uncorrpt"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_genpt"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Jet_genpt"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_residual"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_residual"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_area"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_area"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_jes"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_jes"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_eta"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_phi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_mass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_mass"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip1N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip1N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip1P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip1P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip2N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip2N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip2P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip2P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip3N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip3N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip3P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip3P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip4N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip4N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Ip4P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Ip4P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Mass4N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Mass4N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Mass4P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Mass4P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourBDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourBDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourCvsLDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourCvsLDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourCvsBDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourCvsBDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourB"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourBB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourBB"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourLEPB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourLEPB"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourC"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourC"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourUDS"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourUDS"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourG"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourG"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourBDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourBDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourCvsLDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourCvsLDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepFlavourCvsBDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepFlavourCvsBDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVBDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVBDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVBDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVBDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVBDiscP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVBDiscP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsLDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsLDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsLDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsLDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsLDiscP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsLDiscP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsBDisc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsBDisc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsBDiscN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsBDiscN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVCvsBDiscP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVCvsBDiscP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVb"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVb"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVl"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVl"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVbb"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVbb"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVcc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVcc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVbN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVbN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVcN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVcN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVlN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVlN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVbbN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVbbN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVccN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVccN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVbP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVbP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVcP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVcP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVlP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVlP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVbbP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVbbP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepCSVccP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepCSVccP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ProbaN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ProbaN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ProbaP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ProbaP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Proba"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Proba"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_BprobN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_BprobN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_BprobP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_BprobP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Bprob"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Bprob"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SvxN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SvxN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_Svx"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_Svx"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SvxNHP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SvxNHP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SvxHP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SvxHP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombSvxN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombSvxN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombSvxP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombSvxP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombSvx"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombSvx"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombIVF"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombIVF"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombIVF_P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombIVF_P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_CombIVF_N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_CombIVF_N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftMuN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftMuN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftMuP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftMuP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftMu"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftMu"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftElN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftElN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftElP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftElP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SoftEl"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SoftEl"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DoubleSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DoubleSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_cMVA"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_cMVA"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_cMVAv2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_cMVAv2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_cMVAv2N"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_cMVAv2N"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_cMVAv2P"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_cMVAv2P"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSig_AboveBottom_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSig_AboveBottom_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSig_AboveBottom_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSig_AboveBottom_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_hist1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_hist1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_hist2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_hist2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_hist3"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_hist3"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_histJet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_histJet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_histSvx"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_histSvx"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ntracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ntracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nseltracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nseltracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_flavour"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_flavour"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_flavourCleaned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_flavourCleaned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_partonFlavour"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_partonFlavour"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_hadronFlavour"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_hadronFlavour"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_partonid"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_partonid"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nbHadrons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nbHadrons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ncHadrons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ncHadrons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrack"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrack"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrack"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrack"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrackTruth"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Jet_nFirstTrackTruth"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrackTruth"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("Jet_nLastTrackTruth"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_SV_multi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_SV_multi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkInc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkInc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkInc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkInc"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nSM"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nSM"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSM"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSM"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSM"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSM"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nSE"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nSE"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSE"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSE"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSE"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSE"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_looseID"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_looseID"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tightID"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tightID"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_FatJetIdx"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_FatJetIdx"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ptSoftDrop"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ptSoftDrop"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_etaSoftDrop"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_etaSoftDrop"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_phiSoftDrop"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_phiSoftDrop"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_massSoftDrop"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_massSoftDrop"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_jecF0SoftDrop"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_jecF0SoftDrop"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_ptPruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_ptPruned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_etaPruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_etaPruned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_phiPruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_phiPruned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_massPruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_massPruned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_jecF0Pruned"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_jecF0Pruned"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis1_px"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis1_px"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis1_py"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis1_py"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis1_pz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis1_pz"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis2_px"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis2_px"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis2_py"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis2_py"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tauAxis2_pz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tauAxis2_pz"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_z_ratio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_z_ratio"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nTracks_fat"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nTracks_fat"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nSV_fat"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nSV_fat"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip3dSig_3"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip3dSig_3"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip3dSig_2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip3dSig_2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip3dSig_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip3dSig_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip3dSig_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip3dSig_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSigAboveCharm_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSigAboveCharm_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSigAboveCharm_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSigAboveCharm_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSigAboveBottom_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSigAboveBottom_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_trackSip2dSigAboveBottom_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_trackSip2dSigAboveBottom_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_trackSip3dSig_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_trackSip3dSig_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_trackSip3dSig_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_trackSip3dSig_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_trackSip3dSig_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_trackSip3dSig_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_trackSip3dSig_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_trackSip3dSig_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_trackEtaRel_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_trackEtaRel_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_trackEtaRel_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_trackEtaRel_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_trackEtaRel_2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_trackEtaRel_2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_trackEtaRel_0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_trackEtaRel_0"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_trackEtaRel_1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_trackEtaRel_1"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_trackEtaRel_2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_trackEtaRel_2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_nSecondaryVertices"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_nSecondaryVertices"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_nSecondaryVertices"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_nSecondaryVertices"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_flightDistance2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_flightDistance2dSig"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_flightDistance2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_flightDistance2dSig"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_vertexDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_vertexDeltaR"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_vertexDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_vertexDeltaR"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_vertexEnergyRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_vertexEnergyRatio"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_vertexEnergyRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_vertexEnergyRatio"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_vertexMass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_vertexMass"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_vertexMass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_vertexMass"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_vertexMass_corrected"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_vertexMass_corrected"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_vertexMass_corrected"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_vertexMass_corrected"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau1_vertexNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau1_vertexNTracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_tau2_vertexNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_tau2_vertexNTracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSVTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSVTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSVTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSVTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkTagVarCSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkTagVarCSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkEtaRelTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkEtaRelTagVarCSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkEtaRelTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkEtaRelTagVarCSV"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_DeepDoubleB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_DeepDoubleB"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nTrack"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrack"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_dxy"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_dxy"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_dz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_dz"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_dxyError"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_dxyError"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_dzError"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_dzError"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_sign2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_sign2D"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_sign3D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_sign3D"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_LongIP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_LongIP"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_length"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_length"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_dist"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_dist"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IP2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IP2D"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IP2Dsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IP2Dsig"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IP2Derr"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IP2Derr"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IP"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IPsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IPsig"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_IPerr"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_IPerr"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_Proba"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_Proba"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_p"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_p"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_pt"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_eta"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_phi"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_chi2"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_charge"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_charge"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_history"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_history"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitStrip"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitStrip"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitPixel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitPixel"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitAll"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitAll"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitTIB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitTIB"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitTID"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitTID"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitTOB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitTOB"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitTEC"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitTEC"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitPXB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitPXB"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_nHitPXF"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_nHitPXF"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_isHitL1"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_isHitL1"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_PV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_PV"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_SV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_SV"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_isfromSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_isfromSV"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_PVweight"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_PVweight"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_SVweight"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_SVweight"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_isfromV0"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_isfromV0"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_lengthTau"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_lengthTau"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_distTau"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_distTau"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_category"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_category"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_TPAssociationQuality"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_TPAssociationQuality"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("Track_idxMatchedTP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Track_idxMatchedTP"),
      requires    = cms.vstring("nTrack"),
    ),
    cms.PSet(
      variable    = cms.string("nTrackTruth"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("nTrackTruth"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_idxMatchedTrack"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_idxMatchedTrack"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_p"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_p"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_pt"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_eta"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_phi"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_charge"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_charge"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_pdgid"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_pdgid"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_dxy"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_dxy"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_dz"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_dz"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_nHitAll"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_nHitAll"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_nHitPixel"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_nHitPixel"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("TrackTruth_nHitStrip"),
      store       = cms.bool(False),
      mconly      = cms.bool(True),
      description = cms.string("TrackTruth_nHitStrip"),
      requires    = cms.vstring("nTrackTruth"),
    ),
    cms.PSet(
      variable    = cms.string("nTrkInc"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkInc"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_pt"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_eta"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_phi"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_ptrel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_ptrel"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_IPsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_IPsig"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("TrkInc_IP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TrkInc_IP"),
      requires    = cms.vstring("nTrkInc"),
    ),
    cms.PSet(
      variable    = cms.string("nPFElectron"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nPFElectron"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_IdxJet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_IdxJet"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_pt"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_eta"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_phi"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_ptrel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_ptrel"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_ratio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_ratio"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_ratioRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_ratioRel"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_deltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_deltaR"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_IP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_IP"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_IP2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_IP2D"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("PFElectron_mva_e_pi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFElectron_mva_e_pi"),
      requires    = cms.vstring("nPFElectron"),
    ),
    cms.PSet(
      variable    = cms.string("nPFMuon"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nPFMuon"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_IdxJet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_IdxJet"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nMuHit"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nMuHit"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nTkHit"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nTkHit"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nPixHit"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nPixHit"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nOutHit"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nOutHit"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nTkLwM"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nTkLwM"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nPixLwM"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nPixLwM"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_nMatched"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_nMatched"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_chi2"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_chi2Tk"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_chi2Tk"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_isGlobal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_isGlobal"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_hist"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_hist"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_pt"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_eta"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_phi"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_ptrel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_ptrel"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_ratio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_ratio"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_ratioRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_ratioRel"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_deltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_deltaR"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_IP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_IP"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_IP2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_IP2D"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_IPsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_IPsig"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_IP2Dsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_IP2Dsig"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_dz"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_dz"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("PFMuon_GoodQuality"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("PFMuon_GoodQuality"),
      requires    = cms.vstring("nPFMuon"),
    ),
    cms.PSet(
      variable    = cms.string("nSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nSV"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("SV_x"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_x"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_y"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_y"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_z"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_z"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_ex"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_ex"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_ey"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_ey"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_ez"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_ez"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_chi2"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_ndf"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_ndf"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_flight"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_flight"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_flightErr"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_flightErr"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_deltaR_jet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_deltaR_jet"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_deltaR_sum_jet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_deltaR_sum_jet"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_deltaR_sum_dir"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_deltaR_sum_dir"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_vtx_pt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_vtx_pt"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_flight2D"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_flight2D"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_flight2DErr"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_flight2DErr"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_totCharge"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_totCharge"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_vtxDistJetAxis"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_vtxDistJetAxis"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_nTrk"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_nTrk"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_mass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_mass"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_vtx_eta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_vtx_eta"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_vtx_phi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_vtx_phi"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_EnergyRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_EnergyRatio"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_dir_x"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_dir_x"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_dir_y"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_dir_y"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("SV_dir_z"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SV_dir_z"),
      requires    = cms.vstring("nSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_jetNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("tracks associated to jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_jetNSecondaryVertices"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of reconstructed possible secondary vertices in jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_chargedHadronEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("fraction of the jet energy coming from charged hadrons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_neutralHadronEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("fraction of the jet energy coming from neutral hadrons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_photonEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("fraction of the jet energy coming from photons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_electronEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("fraction of the jet energy coming from electrons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_muonEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("fraction of the jet energy coming from muons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_chargedHadronMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of charged hadrons in the jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_neutralHadronMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of neutral hadrons in the jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_photonMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of photons in the jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_electronMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of electrons in the jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_muonMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of muons in the jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_neutralEmEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TagVar_neutralEmEnergyFraction"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_numberOfDaughters"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TagVar_numberOfDaughters"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_chargedMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TagVar_chargedMultiplicity"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_chargedEmEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TagVar_chargedEmEnergyFraction"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_neutralMultiplicity"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("TagVar_neutralMultiplicity"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nTrkTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkTagVar"),
      requires    = cms.vstring(""),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackMomentum"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track momentum"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackEta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudorapidity"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackPhi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track polar angle"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackPtRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackPPar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudorapidity, relative to the jet axis"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudoangular distance from the jet axis"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackPtRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackPParRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackSip2dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackSip2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter significance"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackSip3dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackSip3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter significance"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackDecayLenVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track decay length"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackDecayLenSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track decay length significance"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackJetDistVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("minimum track approach distance to jet axis"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackJetDistSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("minimum track approach distance to jet axis significance"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackChi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track fit chi2"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackNTotalHits"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of valid total hits"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_trackNPixelHits"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of valid pixel hits"),
      requires    = cms.vstring("nTrkTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("nSVTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nSVTagVar"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_vertexMass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("mass of track sum at secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_vertexNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of tracks at secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_vertexJetDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pseudoangular distance between jet axis and secondary vertex direction"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_flightDistance2dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("transverse distance between primary and secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_flightDistance2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("transverse distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_flightDistance3dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("distance between primary and secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("TagVar_flightDistance3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nSVTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_charged_Sip3dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_charged_Sip3dVal"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_charged_Sip3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_charged_Sip3dSig"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_charged_quality"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_charged_quality"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_charged_chi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_charged_chi2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_neutral_drminsv"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_neutral_drminsv"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_neutral_hadFrac"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_neutral_hadFrac"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_neutral_ptrel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_neutral_ptrel"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_sv_d3d"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_sv_d3d"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_sv_d3dsig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_sv_d3dsig"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("DeepFlavourInput_sv_normchi2"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("DeepFlavourInput_sv_normchi2"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackJetPt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track-based jet transverse momentum"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_jetNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("tracks associated to jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_jetNTracksEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("tracks associated to jet for which trackEtaRel is calculated"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSumJetEtRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ratio of track sum transverse energy over jet energy"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSumJetDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pseudoangular distance between jet axis and track fourvector sum"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip2dValAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip2dSigAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter significance of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip3dValAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip3dSigAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter significance of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_vertexCategory"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("category of secondary vertex (Reco, Pseudo, No)"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_jetNSecondaryVertices"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of reconstructed possible secondary vertices in jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_vertexMass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("mass of track sum at secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_vertexNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of tracks at secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_vertexEnergyRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ratio of energy at secondary vertex over total energy"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_vertexJetDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pseudoangular distance between jet axis and secondary vertex direction"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_flightDistance2dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("transverse distance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_flightDistance2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("transverse distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_flightDistance3dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("distance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_flightDistance3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nTrkTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkTagVarCSV"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("nTrkEtaRelTagVarCSV"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkEtaRelTagVarCSV"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackMomentum"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track momentum"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackEta"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudorapidity"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackPhi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track polar angle"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackPtRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackPPar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudoangular distance from the jet axis"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackPtRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackPParRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip2dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter significance"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip3dVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackSip3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter significance"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackDecayLenVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track decay length"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackDecayLenSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track decay length significance"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackJetDistVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("minimum track approach distance to jet axis"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackJetDistSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("minimum track approach distance to jet axis significance"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("TagVarCSV_trackEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudorapidity, relative to the jet axis"),
      requires    = cms.vstring("nTrkTagVarCSV"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstTrkEtaRelCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstTrkEtaRelCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastTrkEtaRelCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastTrkEtaRelCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstLepCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstLepCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastLepCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastLepCTagVar"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsB"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsB"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsBN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsBN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsBP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsBP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsL"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsL"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsLN"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsLN"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_Jet_CvsLP"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_Jet_CvsLP"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_jetNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("tracks associated to jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_jetNTracksEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("tracks associated to jet for which trackEtaRel is calculated"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_jetNLeptons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_jetNLeptons"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSumJetEtRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ratio of track sum transverse energy over jet energy"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSumJetDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pseudoangular distance between jet axis and track fourvector sum"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSip2dSigAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter significance of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSip3dSigAboveCharm"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter significance of first track lifting mass above charm"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexCategory"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("category of secondary vertex (Reco, Pseudo, No)"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_jetNSecondaryVertices"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of reconstructed possible secondary vertices in jet"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexMass"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("mass of track sum at secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexNTracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("number of tracks at secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexEnergyRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("ratio of energy at secondary vertex over total energy"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexJetDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("pseudoangular distance between jet axis and secondary vertex direction"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_flightDistance2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("transverse distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_flightDistance3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("distance significance between primary and secondary vertex"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_massVertexEnergyFraction"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("vertex mass times the fraction of the vertex energy with respect to the jet energy"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexBoostOverSqrtJetPt"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("variable related to the boost of the vertex system in flight direction"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_vertexLeptonCategory"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_vertexLeptonCategory"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nTrkCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkCTagVar"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("nTrkEtaRelCTagVar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nTrkEtaRelCTagVar"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackPtRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackPPar"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudoangular distance from the jet axis"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackPtRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track transverse momentum, relative to the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackPParRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track parallel momentum, along the jet axis, normalized to its energy"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSip2dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 2D signed impact parameter significance"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackSip3dSig"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track 3D signed impact parameter significance"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackDecayLenVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track decay length"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackJetDistVal"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("minimum track approach distance to jet axis"),
      requires    = cms.vstring("nTrkCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_trackEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("track pseudorapidity, relative to the jet axis"),
      requires    = cms.vstring("nTrkEtaRelCTagVar"),
    ),
    cms.PSet(
      variable    = cms.string("nLeptons"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nLeptons"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonPtRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonPtRel"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonSip3d"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonSip3d"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonDeltaR"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonDeltaR"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonRatioRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonRatioRel"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonEtaRel"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonEtaRel"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("CTag_leptonRatio"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("CTag_leptonRatio"),
      requires    = cms.vstring("nLeptons"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nSubJets"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nSubJets"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSJ"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSJ"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSJ"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSJ"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsharedtracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsharedtracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsubjettracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsubjettracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsharedsubjettracks"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsharedsubjettracks"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nSubJet"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nSubJet"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("SubJetIdx"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SubJetIdx"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nSubJets_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nSubJets_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nFirstSJ_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nFirstSJ_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nLastSJ_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nLastSJ_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsharedtracks_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsharedtracks_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsubjettracks_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsubjettracks_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("Jet_nsharedsubjettracks_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("Jet_nsharedsubjettracks_SoftDropPuppi"),
      requires    = cms.vstring("nJet"),
    ),
    cms.PSet(
      variable    = cms.string("nSubJet_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("nSubJet_SoftDropPuppi"),
      requires    = cms.vstring(),
    ),
    cms.PSet(
      variable    = cms.string("SubJetIdx_SoftDropPuppi"),
      store       = cms.bool(False),
      mconly      = cms.bool(False),
      description = cms.string("SubJetIdx_SoftDropPuppi"),
      requires    = cms.vstring(),
    ),
  ]

variableSet = cms.PSet(
  variables = cms.VPSet(
    variableList
  )
)
