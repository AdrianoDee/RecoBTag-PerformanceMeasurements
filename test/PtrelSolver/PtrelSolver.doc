by Ping Tan, Fermi National Accelerator Laboratory


"fitter" is a root-based marco to help measure the b-tagging efficiency based
on data. It is a relative intelligent package in the sense that it can give almost all the efficiency tables and comparing results, if proper data files are given. 


a. Current status

Derived efficiency tables for b-tagging pt, eta -dependent bins with a fit to pt_rel in muon + jet sample. Future improvement would be on 

1) possible three-componenet fit in the final results.
2) implement other possible dependence on the b-tagging efficiency. 

Current limitations: 

1) some of the data files are harded coded in the code to feed data to the fitter or calculate the MC true efficiency. 

b. Introduction of Usage


1) compile the source code by excute .L fitter.C+
2) initialize:

	fitter test(4, 3); 
	// consider a 4 pt bin & 3 eta bin dependent efficiency tables. 
	// binning of these pt/etas are given in fitter.h

3) derived templates from MC data. 

	makeTemplates(5, "b_flavor.dat", "b_pdf.root");
	// derive the templates for each flavor in consideration. in current 
	// version this is limited two types. b and c flavors. 

	Output: this will create "b_flavor.data" & "b_pdf.root" files, which
		contains the fitting parameters for pdf and fitted results.


 	CAUTION: right now, the input MC data is hard coded in the code. 

	Here is an example of the template data file.
/*--------------------------------------------------------------------------------------------------------------------------
 #pt_min   pt_max  eta_min  eta_max    const_a      error    const_b      error    const_c      error    const_d      error 
      30       50        0    1.305     1.2897   0.185636  -0.693395  0.0883154  0.0348812 0.00974042    51.5521    6.31091 
      30       50    1.305    1.653     1.2897   0.185636  -0.693395  0.0883154  0.0348812 0.00974042    51.5521    6.31091 
      30       50    1.653      2.5     1.2897   0.185636  -0.693395  0.0883154  0.0348812 0.00974042    51.5521    6.31091 
      50       80        0    1.305     1.0729  0.0690042  -0.584246  0.0338347   0.024892 0.00513002    199.956    9.81329 
      50       80    1.305    1.653     1.0729  0.0690042  -0.584246  0.0338347   0.024892 0.00513002    199.956    9.81329 
      50       80    1.653      2.5     1.0729  0.0690042  -0.584246  0.0338347   0.024892 0.00513002    199.956    9.81329 
      80      120        0    1.305    1.10177  0.0464373  -0.628735  0.0240694   0.051731 0.00343367    563.385    18.7196 
      80      120    1.305    1.653    1.10177  0.0464373  -0.628735  0.0240694   0.051731 0.00343367    563.385    18.7196 
      80      120    1.653      2.5    1.10177  0.0464373  -0.628735  0.0240694   0.051731 0.00343367    563.385    18.7196 
     120      170        0    1.305    1.00836   0.065061  -0.606384  0.0378282  0.0802518 0.00622888    264.693    13.1481 
     120      170    1.305    1.653    1.00836   0.065061  -0.606384  0.0378282  0.0802518 0.00622888    264.693    13.1481 
     120      170    1.653      2.5    1.00836   0.065061  -0.606384  0.0378282  0.0802518 0.00622888    264.693    13.1481 
----------------------------------------------------------------------------------------------------------------------------*/


4) load templates from data files derived in step 3). 

	readTemplates("b_flavor.dat",pdfs_b );
	// a vector is used to store the pdfs. 
	// in case of template data files was built, you can load them directly

5) Estimate the efficiency tables for a give tag.

	estimate(tag, eff_table, pdfs_b, pdfs_c);
	makeEffHists(eff_table);

	// CORE function: derive the data/MC efficiency tables
	// the following is one example of the efficiency tables. 

	OUTPUT: the efficiency table.
	// the following is such an example. 

	CAUTION: the data set used to derive the efficiency is also hard coded.



/---------------------------------------------------------------------------------------
   #pt_min     pt_max    eta_min    eta_max   eff_data      error     eff_MC      error 
        30         50          0      1.305   0.453181  0.0563494    0.54417  0.0310069 
        30         50      1.305      1.653   0.218728   0.115424   0.464286    0.12877 
        30         50      1.653        2.5   0.367508   0.100459   0.422414  0.0603448 
        50         80          0      1.305    0.59267  0.0453379   0.579416  0.0169322 
        50         80      1.305      1.653   0.877026   0.408091    0.58156  0.0642226 
        50         80      1.653        2.5   0.625192   0.099338   0.496868  0.0322072 
        80        120          0      1.305    0.66462  0.0385792   0.631142  0.0104496 
        80        120      1.305      1.653    0.78716   0.206397   0.590133  0.0334634 
        80        120      1.653        2.5   0.547572  0.0625562   0.505035  0.0197787 
       120        170          0      1.305   0.896551   0.195233   0.656923  0.0224794 
       120        170      1.305      1.653  -0.213185  -0.424778   0.644628  0.0729898 
       120        170      1.653        2.5   0.482826   0.291622   0.521368  0.0472024 
---------------------------------------------------------------------------------------/

6) make some plots.

	 makeEffHists(eff_table);
	// plot the efficiency table for pt eta dependence. 


7) others. 

	void fitter::initPdfs();
	// basing the the template parameters files, initialize the combined pdf. 



	//  calibrate the fitting template, check for statistics bias, etc. 
	//  mainly try to see if we can extract the fraction of b-jets in a 
	//  steps:        points between 0, 1
	//  total_events: MC toy sample size
	TGraphErrors *fitter::checkLinearity2(TF1 *pdf, int steps, int total_events, bool verbose);


---------------------------------------------------------------------------
comments: ptan@fnal.gov
